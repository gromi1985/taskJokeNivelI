/**Variables para la peticion asincronica */
const API_URL ='https://icanhazdadjoke.com/';
const API_OPCIONES_PETICION = {
    headers: {
        'Accept': 'application/json'
      }
};



/**Interface de datos para cada joke */
interface UnitJoke{
	joke: string;
	score: string;
	date: string;
}
 
/**Array de objetos de tipo interfaceUnitJoke y al ser un const debo inicializarla */
const reportAcudits:UnitJoke[] = [];

let jokeGeneral:string ="";


 // Nodo Raiz donde incruztaremos el resultado devuelto por la API.
 
const button = document.querySelector('.boton-request');
const HTMLResponse = document.querySelector('#chiste');
const buttonFace = document.querySelectorAll('.buttonFace>button');


   // buttonFace[i].addEventListener("click",()=>{console.log('apa')});

   function disabledButtonFace(){
    buttonFace.forEach(button => button.setAttribute('disabled',''));
   }

   function captureParcialData(this:HTMLElement, ev: Event){
      let tmpJoke: UnitJoke = {
          joke:jokeGeneral,
          score:this.getAttribute('value') || '0',
          date:new Date().toISOString()
      };

      //Metodo para no recargar la pagina
      // ev.preventDefault();

      //Agrego elemento al arreglo de objetos
      reportAcudits.push(tmpJoke);

      //Solo le permito votar 1 
        disabledButtonFace();

      //Muestro por consola el arreglo de objetos
      console.log(reportAcudits);
   }

   


function calificacion (buttonElements:NodeListOf<Element>,textElements:String):void {
    let faceCalification:string = '';

    /**Habilito los botones de caritas */
    buttonElements.forEach(button => {
        button.removeAttribute("disabled");
        button.addEventListener("click", captureParcialData);
    });

    // buttonElements.forEach(button => console.log(button.getAttribute("value")));

    // for(let i in buttonElements)
    //     console.log(buttonElements[i].innerHTML);
        //  console.log('APA:' + buttonElements[i]);
        //   buttonElements[i].addEventListener("click",()={()=> 
        //  })

    /**Creo un escuchador de eventos para cada carita, y cuando de click llamarÃ¡ a la funcion captureParcialData */

            // buttonElements.forEach(button => button.addEventListener("click",captureParcialData));
    
}

   

if (button && HTMLResponse && buttonFace){
 button.addEventListener('click',()=>{
    const myFirstPromise = fetch(API_URL, API_OPCIONES_PETICION)
        .then(response=>response.json())
        .then(data=>{
            if(data.status == 200){
                let cleanElement = HTMLResponse.querySelector('p');
                if(cleanElement != undefined)
                    cleanElement.remove();  
        
                 let newJoke = document.createElement('p');
                 newJoke.classList.add('jokeData');
                 newJoke.innerHTML = data.joke;
                 HTMLResponse.append(newJoke);

                //    for(let i in buttonFace)
                //     buttonFace[i].removeAttribute("disabled");
                jokeGeneral = data.joke;
                calificacion(buttonFace,data.joke);
     
             }
        });

        myFirstPromise.catch(error => console.log('Error en la promesa: ', error) );

     });

    }

    
    /*

const getJoke = async() => { 
    try{
     const jokeData = await fetch(`${API_URL}`,{
        headers:{
            'Accept': 'application/json'
          }
     });

     let jokeObj = await jokeData.json();
     const jokeElement = jokeObj.joke;

     if(jokeObj.status == 200){
        let cleanElement = HTMLResponse.querySelector('p');
        if(cleanElement != undefined)
            cleanElement.remove();  

         let newJoke = document.createElement('p');
         newJoke.classList.add('jokeData');
         newJoke.innerHTML = jokeElement;
         HTMLResponse.append(newJoke);

     }
    }

    catch(error){
        console.log(error);
    }
}*/

